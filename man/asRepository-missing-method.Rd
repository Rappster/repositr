% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/asRepository.r
\docType{methods}
\name{asRepository,missing-method}
\alias{asRepository,missing-method}
\title{As repository (miss)}
\usage{
\S4method{asRepository}{missing}(repos = ".", type = c("fs", "url_fs",
  "url_http", "url_ftp"), ensure = FALSE, ...)
}
\arguments{
\item{repos}{\code{\link{missing}}.}

\item{type}{\code{\link{character}}.
Path type. One of \code{ c("fs", "url_fs", "url_http", "url_ftp")}.}

\item{ensure}{\code{logical}.
\code{TRUE}: ensure existence of repository (including sub-level pahts);
\code{FALSE}: existence is not ensured}

\item{...}{Further arguments passed to subsequent functions.
In particular:
\itemize{
  \item{\code{\link[repor]{ensureRepository}}}
}}
}
\description{
See generic: \code{\link{asRepository.S3}}.
}
\examples{
.cleanTempDir <- function(x) {
  if (grepl(basename(tempdir()), x)) {
    unlink(x, recursive = TRUE, force = TRUE)
  }
}

repos  <- normalizePath(file.path(tempdir(), "repos"), 
  winslash = "/", mustWork = FALSE)
.cleanTempDir(x = repos)

##------------------------------------------------------------------------------
## Character //
##------------------------------------------------------------------------------

asRepository(repos = repos)
file.exists(repos)

asRepository(repos = repos, ensure = TRUE)
file.exists(repos)
.cleanTempDir(x = repos)

##------------------------------------------------------------------------------
## PackageRepositoryRoot.S3 //
##------------------------------------------------------------------------------

asRepository(repos = asRepositoryRoot(repos))
file.exists(repos)

asRepository(repos = asRepositoryRoot(repos), ensure = TRUE)
file.exists(repos)
.cleanTempDir(x = repos)

##------------------------------------------------------------------------------
## PackageRepository.S3 //
##------------------------------------------------------------------------------

asRepository(repos = asRepository(repos))
file.exists(repos)

asRepository(repos = asRepository(repos), ensure = TRUE)
file.exists(repos)
.cleanTempDir(x = repos)

##------------------------------------------------------------------------------
## Sublevels //
##------------------------------------------------------------------------------

## PackageRepositorySubMac.S3
## PackageRepositorySubSource.S3
## PackageRepositorySubWindows.S3

repos <- asRepository(repos)
lapply(seq(along = repos$sublevel), function(ii) {
  asRepository(repos = repos$sublevel[[ii]])
})
lapply(seq(along = repos$sublevel), function(ii) {
  asRepository(repos = repos$sublevel[[ii]], ensure = TRUE)
})
.cleanTempDir(x = repos$root$path)
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/rappster/repor}
}

